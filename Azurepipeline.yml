trigger:
- main  # Change branch if needed

pool:
  vmImage: 'windows-latest'

steps:
- task: NuGetCommand@2
  displayName: "Restore NuGet Packages"
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'

- task: VSBuild@1
  displayName: "Build Solution"
  inputs:
    solution: '**/*.sln'
    platform: 'Any CPU'
    configuration: 'Release'

- task: IISWebAppManagementOnMachineGroup@0
  displayName: "Deploy to IIS (Local)"
  inputs:
    ActionIISWebsite: 'CreateOrUpdateWebsite'
    WebsiteName: 'AspNetSite'
    WebsitePhysicalPath: '$(Build.ArtifactStagingDirectory)/aspnet-get-started'
    WebsitePhysicalPathAuth: 'WebsiteUserPassThrough'
    Bindings: 'http:*:8080:'

- script: |
    echo "Waiting for site to start..."
    Start-Sleep -s 5
    Invoke-WebRequest -Uri "http://localhost:8080/Home/Index" -OutFile output.html
    echo "======= ASP.NET Page Output ======="
    Get-Content output.html
  displayName: "Fetch and Print Web Page"

# trigger:
#   branches:
#     include:
#       - main  # Change this to match your default branch

# pool:
#   vmImage: 'windows-latest'

# variables:
#   solution: '**/*.sln'
#   buildPlatform: 'Any CPU'
#   buildConfiguration: 'Release'
#   outputDirectory: '$(Build.ArtifactStagingDirectory)\drop'

# steps:

# # Step 1: Restore NuGet Packages
# - task: NuGetCommand@2
#   displayName: 'Restore NuGet Packages'
#   inputs:
#     command: 'restore'
#     restoreSolution: '$(solution)'

# # Step 2: Build the Solution using MSBuild
# - task: VSBuild@1
#   displayName: 'Build Solution'
#   inputs:
#     solution: '$(solution)'
#     msbuildArgs: '/p:Configuration=$(buildConfiguration) /p:OutputPath=$(Build.ArtifactStagingDirectory)\drop'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

# # Step 3: Publish Build Artifacts
# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Artifacts'
#   inputs:
#     pathToPublish: '$(Build.ArtifactStagingDirectory)'
#     artifactName: 'drop'

# Step 4: Deploy (Optional - Copy Files Over SSH to Windows Server)
# - task: CopyFilesOverSSH@0
#   displayName: 'Deploy to Windows Server'
#   inputs:
#     sshEndpoint: 'MyWindowsServer'  # Define this in Azure DevOps Service Connections
#     sourceFolder: '$(Build.ArtifactStagingDirectory)/drop'
#     targetFolder: 'C:\inetpub\wwwroot\myapp'  # Change this to your IIS site folder
#     cleanTargetFolder: true
#     overwrite: true
 
# trigger:
# - main

# pool:
#   vmImage: 'windows-latest'

# variables:
#   solution: '**/*.sln'
#   buildPlatform: 'Any CPU'
#   buildConfiguration: 'Release'

# steps:
# - task: NuGetToolInstaller@1
#   displayName: 'Install NuGet'

# - task: NuGetCommand@2
#   displayName: 'Restore NuGet Packages'
#   inputs:
#     restoreSolution: '$(solution)'
#     command: 'restore'
# - task: PowerShell@2
#   displayName: 'Verify Build Output'
#   inputs:
#     targetType: 'inline'
#     script: 'Get-ChildItem -Recurse $(Build.ArtifactStagingDirectory)'
    
# # - task: VSBuild@1
# #   displayName: 'Build Solution using MSBuild'
# #   inputs:
# #     solution: '$(solution)'
# #     platform: '$(buildPlatform)'
# #     configuration: '$(buildConfiguration)'
# - task: MSBuild@1
#   inputs:
#     solution: '**/*.sln'
#     configuration: '$(buildConfiguration)'
#     # platform: '$(buildPlatform)'
#     clean: true
#     restoreNugetPackages: true
#     msbuildArgs: '/p:OutDir=$(Build.ArtifactStagingDirectory)\bin\'
    

# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Artifacts'
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     ArtifactName: 'drop'
#     publishLocation: 'Container'
